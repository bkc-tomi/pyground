from pyground.tests import CommonTestCase
from django.urls    import reverse

# モデル
from bookmark.models   import Bookmark
from friend.models     import Follow, Permit
from playground.models import Code
from question.models   import Question, Correcter
from user.models       import User, Profile

# templateのあるviewのみテスト
# POST処理等は取りあえすしない

class RegisterViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／登録ページ
    ----------------------------------------------------------------------
    """
    def test_message(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        指定したメッセージを取得して表示できるか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------

    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしている状態ならユーザー詳細のページへ遷移

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: user:detail
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')
        login_user = self.make_login_user(u.id, u.username)

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:register'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('user:detail', args=(u.id, )),
            status_code=302,
        )

class RegisterCompleteViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／登録完了ページ
    ----------------------------------------------------------------------
    """

    def test_regster_complete(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        セッションへのログインユーザーの情報登録ができているか
        トークンの削除ができているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------

    def test_register_complete_with_no_token(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        トークンがない場合の処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------

class RunRegisterViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／登録処理
    ----------------------------------------------------------------------
    """
    def test_run_register(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        データの登録ができているか
        セッションへのメッセージの登録ができている
        メールの送信はできているか

        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_validate_not_entered(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        未入力に対するバリデーションができているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_validate_password(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        パスワードと確認用の付き合わせができているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


class LoginViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／ログインページ
    ----------------------------------------------------------------------
    """
    def test_message(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        セッションにメッセージを登録できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしている状態ならユーザー詳細のページへ遷移

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: user:detail
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')
        login_user = self.make_login_user(u.id, u.username)

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:register'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('user:detail', args=(u.id, )),
            status_code=302,
        )

class RunLoginViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／ログイン処理
    ----------------------------------------------------------------------
    """
    def test_login(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        メッセージ情報を取得し表示できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_validate_not_entered(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        未入力情報によるバリデーションは作用しているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


class RunLogoutViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／ログアウト処理
    ----------------------------------------------------------------------
    """
    def test_logout(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        セッションのログインユーザー情報は破棄されているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_logout_with_no_user_id(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーIDが指定されていない場合に適切にエラーページに遷移しているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:run_logout', args=(u.id, )))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class WithdrawalViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／退会ページ
    ----------------------------------------------------------------------
    """

    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:withdrawal'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class RunWithdrawalViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／退会処理
    ----------------------------------------------------------------------
    """
    def test_withdrawal(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        セッションからログインユーザー情報は破棄できているか
        ユーザー情報は削除できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------



    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:run_withdrawal'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class DetailViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／プロフィール詳細ページ
    ----------------------------------------------------------------------
    """
    def test_detail(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        該当のユーザー情報は取得できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_detail_with_no_user(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーIDに該当するユーザーがいない場合の処理が適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_is_follow(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        フォローしているかどうかの判定は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_is_me_true(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ログインユーザーの判定は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------

    def test_is_me_false(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ログインユーザーの判定は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_is_permit_true(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        申請情報の取得は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------

    def test_is_permit_false(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        申請情報の取得は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:detail', args=(u.id, )))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class CreateViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／プロフィール新規作成ページ
    ----------------------------------------------------------------------
    """
    def test_create(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ログインしているユーザーのIDを取得できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------



    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:create'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class RunCreateViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／プロフィール新規作成処理
    ----------------------------------------------------------------------
    """
    def test_run_create(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザー情報の更新が行われているか
        プロフィール情報が作成されているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:run_create'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class EditViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／プロフィール編集ページ
    ----------------------------------------------------------------------
    """
    def test_edit(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        適切なユーザーを取得しているか
        適切なプロフィールを取得しているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_with_no_user(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        指定したユーザーが存在しない時の処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------



    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:edit', args=(u.id, )))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class RunEditViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／プロフィール編集処理
    ----------------------------------------------------------------------
    """
    def test_run_edit(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザー情報の更新はできているか
        プロフィール情報の更新はできているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_run_edit_with_no_user(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        該当のユーザーがいない場合の処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_validate_username(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        username未入力に対する処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_validate_password(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        パスワード未入力に対する処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------
        u = self.make_user('u1', 'a@b.jp', '0000')

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:run_edit', args=(u.id, )))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )

class IndexViewTest(CommonTestCase):
    """
    ----------------------------------------------------------------------
    ユーザー／ユーザー一覧ページ
    ----------------------------------------------------------------------
    """
    def test_index(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザー情報を取得し表示できているか
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_index_with_no_user(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザー情報がない場合の処理は適切か
        ** 入力値 **
        
        ** 期待値 **
        
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------

        # テスト ---------------------------------------------------


    def test_redirect(self):
        """
        ----------------------------------------------------------------
        ** テスト内容 **
        ユーザーがログインしてない状態でのリダイレクト

        ** 入力値 **
        login_user
        ** 期待値 **
        リダイレクト先: top:top
        ----------------------------------------------------------------
        """
        # データ作成 ------------------------------------------------

        # 実行 -----------------------------------------------------
        response = self.client.get(reverse('user:index'))

        # テスト ---------------------------------------------------
        self.assertRedirects(
            response,
            expected_url=reverse('top:top'),
            status_code=302,
        )
